The SELECT statement is used to query the database and retrieve selected data that 
match the criteria that you specify.

SELECT clause syntax:
SELECT [ALL | DISTINCT] column1[,column2] FROM table1[,table2] [WHERE "conditions"] [GROUP BY "column-list"] [HAVING "conditions] [ORDER BY "column-list" [ASC | DESC] ]

Select all of the values in the name, age, and salary 
columns from the employee table whose age is greater than 40.
SELECT name, age, salary FROM employee WHERE age > 40;

SELECT name, title, dept FROM employee WHERE title LIKE 'Pro%'; 

ALL and DISTINCT are keywords used to select either ALL (default) 
or the "distinct" or unique records in your query results. If you 
would like to retrieve just the unique records in specified columns, 
you can use the "DISTINCT" keyword. DISTINCT will discard the duplicate 
records for the columns you specified after the "SELECT" statement: For example:

SELECT DISTINCT age FROM employee_info;


From the items_ordered table, select a list of all items purchased for 
customerid 10449. Display the customerid, item, and price for this customer.
SELECT customerid, item, price FROM items_ordered WHERE customerid=10449;

Select all columns from the items_ordered table for whoever purchased a Tent.
SELECT * FROM item_ordered WHERE item='Tent';

Select the customerid, order_date, and item values from the items_ordered 
table for any items in the item column that start with the letter "S".
SELECT customerid, order_date, item from items_ordered WHERE item LIKE 'S%';

Select the distinct items in the items_ordered table. In other words, display 
a listing of each of the unique items from the items_ordered table.
SELECT DISTINCT item FROM items_ordered;


MIN	returns the smallest value in a given column
MAX	returns the largest value in a given column
SUM	returns the sum of the numeric values in a given column
AVG	returns the average value of a given column
COUNT	returns the total number of values in a given column
COUNT(*)	returns the number of rows in a table

This statement will return a single result which contains the average value 
of everything returned in the salary column from the employee table.
SELECT AVG(salary) FROM employee;

This statement will return the average salary for all employee whose title 
is equal to 'Programmer'
SELECT AVG(salary) FROM employee WHERE title='Programmer';

This particular statement is slightly different from the other aggregate 
functions since there isn't a column supplied to the count function. This 
statement will return the number of rows in the employees table.
SELECT COUNT(*) FROM employee;

Select the maximum price of any item ordered in the items_ordered table. 
Hint: Select the maximum price only.
SELECT MAX(price) from items_ordered;

Select the average price of all of the items ordered that were purchased 
in the month of Dec.
SELECT AVG(price) FROM items_ordered WHERE order_date LIKE '%Dec%';

What are the total number of rows in the items_ordered table?
SELECT COUNT(*) from items_ordered;

For all of the tents that were ordered in the items_ordered table, what is the 
price of the lowest tent? Hint: Your query should return the price only.
SELECT MIN(price) from items_ordered WHERE item='Tent';


GROUP BY clause will gather all of the rows together that contain data in the 
specified columns and wil allow aggregate functions to be performed on the 
one or more columns.

GROUP BY clause syntax:
SELECT column1, SUM(column2) FROM 'list-of-tables' GROUP BY 'column-list';

Let's say you would like to retrieve a list of the highest paid salaries in each dept:
SELECT max(slaary), dept FROM employee GROUP BY dept;

Let's say you want to group everything of quantity 1 together, everything of 
quantity 2 together, everything of quantity 3 together, etc. If you would like 
to determine what the largest cost item is for each grouped quantity (all 
quantity 1's, all quantity 2's, all quantity 3's, etc.), you would enter:
SELECT qunatity, max(price) FROM items_ordered GROUP BY quantity;


SELECT state, COUNT(state) FROM customers GROUP BY state;
SELECT item, MAX(price), MIN(price) from items_ordered GROUP BYitem;
SELECT customerid, COUNT(customerid), SUM(price) FROM items_ordered GROUP BY customerid;

HAVING cluase syntax:
SELECT column1, SUM(colum2) FROM 'list-of-tables' GROUP BY 'column-list' HAVING 'condition';

SELECT dept, AVG(salary) from employee GROUP BY dept;
SELECT dept, AVG(salary) FROM employee GROUP BY dept HAVING AVG(salary) > 20000;

How many people are in each unique state in the customers table that have more than 
one person in the state? Select the state and display the number of how many people 
are in each if it's greater than 1.
SELECT state, COUNT(state) FROM customers GROUP BY state HAVING COUNT(state) > 1;

From the items_ordered table, select the item, maximum price, and minimum price for 
each specific item in the table. Only display the results if the maximum price for 
one of the items is greater than 190.00.
SELECT item, MAX(price), MIN(price) FROM items_ordered GROUP BY item HAVING MAX(price) > 190.00

How many orders did each customer make? Use the items_ordered table. Select the customerid, 
number of orders they made, and the sum of their orders if they purchased more than 1 item.
SELECT customerid, COUNT(customerid), SUM(price) FROM items_ordered GROUP BY  customerid HAVING COUNT(customerid) > 1;


ORDER BY is an optional clause which will allow you to display the results of your query in 
a sorted order (either ascending order or descending order) based on the columns that you 
specify to order by.

ORDER BY clause syntax:
SELECT colum1, SUM(column2) FROM 'list-of-tables' ORDER BY 'column-list' [ASC | DESC];

This statement will select the employee_id, dept, name, age, and salary from the employee_info 
table where the dept equals 'Sales' and will list the results in Ascending (default) order 
based on their Salary.
SELECT employee_id, dept, name, age, salary FROM employee_info WHERE dept = 'Sales'ORDER BY salary, age DESC;

Select the lastname, firstname, and city for all customers in the customers table. 
Display the results in Ascending Order based on the lastname.
SELECT lastname, firstname, city FROM customers ORDER BY lastname ASC;

Same thing as exercise #1, but display the results in Descending order.
SELECT lastname, firstname, city FROM customers ORDER BY lastname DESC;

Select the item and price for all of the items in the items_ordered table that the price 
is greater than 10.00. Display the results in Ascending order based on the price.
SELECT item, price FROM items_ordered WHERE price > 10.00 ORDER BY price ASC;


The AND operator can be used to join two or more conditions in the WHERE clause. Both sides of the 
AND condition must be true in order for the condition to be met and for those rows to be displayed.
SELECT column1, SUM(column2) FROM "list-of-tables" WHERE "condition1" AND "condition2";

Select the customerid, order_date, and item from the items_ordered table for all items unless 
they are 'Snow Shoes' or if they are 'Ear Muffs'. Display the rows as long as they are not 
either of these two items.
SELECT customerid, order_date, item FROM items_ordered WHERE item != 'Snow Shoes AND item!='Ear Muffs';

Select the item and price of all items that start with the letters 'S', 'P', or 'F'.
SELECT item, price FROM items_ordered WHERE item LIKE 'S%' OR item LIKE 'P%' OR item LIKE 'F%';


IN & BETWEEN
SELECT col1, SUM(col2) FROM "list-of-tables" WHERE col3 IN (list-of-values);
SELECT col1, SUM(col2) FROM "list-of-tables" WHERE col3 BETWEEN value1 AND value2;

SELECT employeeid, lastname, salary FROM employee_info WHERE lastname IN ('Hernandez', 'Jones', 'Roberts', 'Ruiz');

SELECT employeeid, age, lastname, salary FROM employee_info WHERE age BETWEEN 30 AND 40;

Select the date, item, and price from the items_ordered table for all of the rows that 
have a price value ranging from 10.00 to 80.00.
SELECT date, item, price FROM items_ordered WHERE price BETWEEN 10.00 AND 80.00;

Select the firstname, city, and state from the customers table for all of the rows where the 
state value is either: Arizona, Washington, Oklahoma, Colorado, or Hawaii.
SELECT firstname, city, state FROM customers WHERE state IN('Aizona', 'Washington', 'Oklahoma, 'Colorado', 'Hawaii');


+	addition
-	subtraction
*	multiplication
/	division
%	modulo
ABS(x)	returns the absolute value of x
SIGN(x)	returns the sign of input x as -1, 0, or 1 (negative, zero, or positive respectively)
MOD(x,y)	modulo - returns the integer remainder of x divided by y (same as x%y)
FLOOR(x)	returns the largest integer value that is less than or equal to x
CEILING(x) or CEIL(x)	returns the smallest integer value that is greater than or equal to x
POWER(x,y)	returns the value of x raised to the power of y
ROUND(x)	returns the value of x rounded to the nearest whole integer
ROUND(x,d)	returns the value of x rounded to the number of decimal places specified by the value d
SQRT(x)	returns the square-root value of x



Table Joins
Joins allow you to link data from two or more tables together into a single 
query result--from one single SELECT statement.
SELECT "list-of-columns" FROM table1,table2 WHERE "search-condition(s)"

Inner Join.
SELECT customer_info.firstname, customer_info.lastname, purchases.item
FROM customer_info, purchases
WHERE customer_info.customer_number = purchases.customer_number;

SELECT customer_info.firstname, customer_info.lastname, purchases.item
FROM customer_info INNER JOIN purchases
ON customer_info.customer_number = purchases.customer_number;

SELECT employee_info.employeeid, employee_info.lastname, employee_sales.comission
FROM employee_info, employee_sales
WHERE employee_info.employeeid = employee_sales.employeeid;

Write a query using a join to determine which items were ordered by each of the customers 
in the customers table. Select the customerid, firstname, lastname, order_date, item, and 
price for everything each customer purchased in the items_ordered table.
SELECT cutomers.customerid, customers.firstname, customers.lastname, items_ordered.order_date, items_ordered.item, items_ordered.price 
FROM customers INNER JOIN items_ordered 
WHERE customers.customer_id = items_ordered.customerid;

Repeat exercise #1, however display the results sorted by state in descending order.
SELECT cutomers.customerid, customers.firstname, customers.lastname, items_ordered.order_date, items_ordered.item, items_ordered.price 
FROM customers INNER JOIN items_ordered 
WHERE customers.customer_id = items_ordered.customerid
ORDER BY customers.state DESC;


